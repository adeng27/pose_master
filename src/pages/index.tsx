import { DrawingUtils, FilesetResolver, PoseLandmarker } from "@mediapipe/tasks-vision";
import Head from "next/head";
import Image from "next/image";
import { useRef } from "react";

import { api } from "~/utils/api";

let poseLandmarker: PoseLandmarker;

const createPoseLandmarker = async () => {
  const vision = await FilesetResolver.forVisionTasks("https://cdn.jsdelivr.net/npm/@mediapipe/tasks-vision@0.10.0/wasm");
  poseLandmarker = await PoseLandmarker.createFromOptions(vision, {
    baseOptions: {
      modelAssetPath: "/pose_landmarker_full.task",
      delegate: "GPU"
    },
    runningMode: "IMAGE",
    numPoses: 2
  });
}

const CustImage = (props: {src: string, height: number, width: number}) => {
  const imageRef = useRef<HTMLImageElement>(null);

  const handleClick = () => {
    const imageSrc = imageRef.current!;
    if (poseLandmarker) poseLandmarker.detect(imageSrc, (result) => {
      console.log(result, result)
      const canvas = document.createElement("canvas");
      canvas.setAttribute("class", "canvas");
      canvas.setAttribute("width", props.width + "px");
      canvas.setAttribute("height", props.height + "px");

      const div = document.getElementById("target")!
      div.appendChild(canvas);
      const canvasCtx = canvas.getContext("2d")!;
      const drawingUtils = new DrawingUtils(canvasCtx);
      for (const landmark of result.landmarks) {
      drawingUtils.drawLandmarks(landmark, {
        radius: (data) => DrawingUtils.lerp(data.from!.z, -0.15, 0.1, 5, 1)
      });
      drawingUtils.drawConnectors(landmark, PoseLandmarker.POSE_CONNECTIONS);
    }
    })
  }

  return (
    <div className="relative">
      <div id="target" className="absolute border-solid border-2 border-sky-500">

    </div>
      <Image 
        src={props.src} 
        height={props.height} 
        width={props.width} 
        ref={imageRef} 
        onClick={() => handleClick()} 
        alt="test" 
        className=""
      />
    </div>
  )
}

export default function Home() {
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <CustImage src={"/zoom1.webp"} width={864} height={1296} />
          <button onClick={() => createPoseLandmarker()} className="text-white">
            click me
          </button>
        </div>
      </main>
    </>
  );
}
