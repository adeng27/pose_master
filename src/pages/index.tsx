import Head from "next/head";
import { useEffect, useRef, useState } from "react";
import { Poses } from "~/components/poses";
import { api } from "~/utils/api";

export default function Home() {
  //To add a pose
  // const {mutate: addPose} = api.pose.addPose.useMutation();

  const {data: poseData} = api.pose.getPose.useQuery("T-Pose");

  const videoRef = useRef<HTMLVideoElement>(null);
  const photoRef = useRef<HTMLCanvasElement>(null);

  const [imageUrl, setImageUrl] = useState("");

  useEffect(() => {
    getVideo();
  }, [videoRef]);

  const getVideo = () => {
    navigator.mediaDevices
      .getUserMedia({ video: { width: 378, height: 504} })
      .then(async stream => {
        const video = videoRef.current!;
        video.srcObject = stream;
        await video.play();
      })
      .catch(err => {
        console.error("error:", err);
      });
  };

  const paintToCanvas = () => {
    const video = videoRef.current!;
    const photo = photoRef.current!;
    const ctx = photo.getContext('2d')!;

    const width = 378;
    const height = 504;
    photo.width = width;
    photo.height = height;

    ctx.drawImage(video, 0, 0, width, height);
    return true;
  };

  const takePhoto = () => {
    const photo = photoRef.current!;

    const data = photo.toDataURL('image/jpeg');
    setImageUrl(data);

    // console.warn(data);
  };

  const [countdown, setCountdown] = useState(3);

  //To add a pose
  // const addOnePose = (nameParam: string, landmarksParam: number[], difficultyParam: number) => {
  //   addPose({name: nameParam, landmarks: landmarksParam, difficulty: difficultyParam});
  // }

  return (
    <>
      <Head>
        <title>Pose Master</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          {imageUrl !== "" && <Poses imageUrl={imageUrl} />}
          <div className="flex flex-col gap-8">
            <button onClick={() => {
              setTimeout(() => setCountdown(2), 1000)
              setTimeout(() => setCountdown(1), 2000)
              setTimeout(() => {
                setCountdown(0)
                if (paintToCanvas()) {
                  takePhoto();
                }
              }, 5000)
            }}>Take a photo</button>
            <video ref={videoRef} />
            <div className="flex justify-center text-white">
              { countdown }
            </div>
            <canvas ref={photoRef} className="hidden" />
            {/* <button onClick={() => {addOnePose(
              "T-Pose",
              [0.18524380649642752, 0.012459343124820893, 0.22759957713004525, 0.043303350899495545, 0.1347904275079755, 0.04467234417766422, 0.28841686761534374, 0.03862719640933583, 0.08551147949044349, 0.04499768535910111, 0.3571568775129372, 0.0237200789929649, 0.021825018133979485, 0.04383588803471717, 0.2057290197128731, 0.19727270292718296, 0.16050994402966665, 0.19777722313501536, 0.20149839014580787, 0.2768812072939942, 0.16452136678886037, 0.274693171470825, 0.19901230718507606, 0.33935149855901625, 0.17690259313497814, 0.33938947227137],
              1
              )}}>Add Pose</button> */}
              <button onClick={() => {
                console.log(poseData?.name, poseData?.landmarks, poseData?.difficulty)
              }}>
                Get pose data
              </button>
          </div>
        </div>
      </main>
    </>
  );
}
